// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/BatteryState.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "sensor_msgs/msg/battery_state.h"

#include "ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2BatteryStateMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSBatteryState
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int header_stamp_sec;

	unsigned int header_stamp_nanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString header_frame_id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float voltage;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float temperature;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float current;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float charge;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float capacity;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float design_capacity;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	float percentage;

	uint8 power_supply_status;

	uint8 power_supply_health;

	uint8 power_supply_technology;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	bool present;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> cell_voltage;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> cell_temperature;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString location;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString serial_number;

	

	void SetFromROS2(const sensor_msgs__msg__BatteryState& in_ros_data)
	{
    	header_stamp_sec = in_ros_data.header.stamp.sec;

		header_stamp_nanosec = in_ros_data.header.stamp.nanosec;

		header_frame_id.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		voltage = in_ros_data.voltage;

		temperature = in_ros_data.temperature;

		current = in_ros_data.current;

		charge = in_ros_data.charge;

		capacity = in_ros_data.capacity;

		design_capacity = in_ros_data.design_capacity;

		percentage = in_ros_data.percentage;

		power_supply_status = in_ros_data.power_supply_status;

		power_supply_health = in_ros_data.power_supply_health;

		power_supply_technology = in_ros_data.power_supply_technology;

		present = in_ros_data.present;

		for (int i = 0; i < in_ros_data.cell_voltage.size; i++)
		{
			cell_voltage.Add(in_ros_data.cell_voltage.data[i]);
		}

		for (int i = 0; i < in_ros_data.cell_temperature.size; i++)
		{
			cell_temperature.Add(in_ros_data.cell_temperature.data[i]);
		}

		location.AppendChars(in_ros_data.location.data, in_ros_data.location.size);

		serial_number.AppendChars(in_ros_data.serial_number.data, in_ros_data.serial_number.size);

		
	}

	void SetROS2(sensor_msgs__msg__BatteryState& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = header_stamp_sec;

		out_ros_data.header.stamp.nanosec = header_stamp_nanosec;

		{
			FTCHARToUTF8 strUtf8( *header_frame_id );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*header_frame_id), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		out_ros_data.voltage = voltage;

		out_ros_data.temperature = temperature;

		out_ros_data.current = current;

		out_ros_data.charge = charge;

		out_ros_data.capacity = capacity;

		out_ros_data.design_capacity = design_capacity;

		out_ros_data.percentage = percentage;

		out_ros_data.power_supply_status = power_supply_status;

		out_ros_data.power_supply_health = power_supply_health;

		out_ros_data.power_supply_technology = power_supply_technology;

		out_ros_data.present = present;

		if (out_ros_data.cell_voltage.data != nullptr)
		{
			free(out_ros_data.cell_voltage.data);
		}
		out_ros_data.cell_voltage.data = (decltype(out_ros_data.cell_voltage.data))malloc((cell_voltage.Num())*sizeof(decltype(*out_ros_data.cell_voltage.data)));
		
		for (int i = 0; i < cell_voltage.Num(); i++)
		{
			out_ros_data.cell_voltage.data[i] = cell_voltage[i];
		}

		out_ros_data.cell_voltage.size = cell_voltage.Num();
		out_ros_data.cell_voltage.capacity = cell_voltage.Num();

		if (out_ros_data.cell_temperature.data != nullptr)
		{
			free(out_ros_data.cell_temperature.data);
		}
		out_ros_data.cell_temperature.data = (decltype(out_ros_data.cell_temperature.data))malloc((cell_temperature.Num())*sizeof(decltype(*out_ros_data.cell_temperature.data)));
		
		for (int i = 0; i < cell_temperature.Num(); i++)
		{
			out_ros_data.cell_temperature.data[i] = cell_temperature[i];
		}

		out_ros_data.cell_temperature.size = cell_temperature.Num();
		out_ros_data.cell_temperature.capacity = cell_temperature.Num();

		{
			FTCHARToUTF8 strUtf8( *location );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.location.data != nullptr)
		{
			free(out_ros_data.location.data);
		}
		out_ros_data.location.data = (decltype(out_ros_data.location.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.location.data)));
		memcpy(out_ros_data.location.data, TCHAR_TO_UTF8(*location), (strLength+1)*sizeof(char));
			out_ros_data.location.size = strLength;
			out_ros_data.location.capacity = strLength + 1;
		}

		{
			FTCHARToUTF8 strUtf8( *serial_number );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.serial_number.data != nullptr)
		{
			free(out_ros_data.serial_number.data);
		}
		out_ros_data.serial_number.data = (decltype(out_ros_data.serial_number.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.serial_number.data)));
		memcpy(out_ros_data.serial_number.data, TCHAR_TO_UTF8(*serial_number), (strLength+1)*sizeof(char));
			out_ros_data.serial_number.size = strLength;
			out_ros_data.serial_number.capacity = strLength + 1;
		}

		
	}
};

UCLASS()
class RCLUE_API UROS2BatteryStateMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSBatteryState& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSBatteryState& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	sensor_msgs__msg__BatteryState battery_state_msg;
};