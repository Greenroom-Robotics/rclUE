// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/PointCloud.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "sensor_msgs/msg/point_cloud.h"

#include "ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2PointCloudMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSPointCloud
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int header_stamp_sec;

	unsigned int header_stamp_nanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString header_frame_id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> points_x;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> points_y;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> points_z;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> channels_name;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<float> channels_values;

	

	void SetFromROS2(const sensor_msgs__msg__PointCloud& in_ros_data)
	{
    	header_stamp_sec = in_ros_data.header.stamp.sec;

		header_stamp_nanosec = in_ros_data.header.stamp.nanosec;

		header_frame_id.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		for (int i = 0; i < in_ros_data.points.size; i++)
		{
			points_x.Add(in_ros_data.points.data[i].x);
		}

		for (int i = 0; i < in_ros_data.points.size; i++)
		{
			points_y.Add(in_ros_data.points.data[i].y);
		}

		for (int i = 0; i < in_ros_data.points.size; i++)
		{
			points_z.Add(in_ros_data.points.data[i].z);
		}

		for (int i = 0; i < in_ros_data.channels.size; i++)
		{
			channels_name.Add("");
			channels_name[i].AppendChars(in_ros_data.channels.data[i].name.data,in_ros_data.channels.data[i].name.size);
		}

		for (int i = 0; i < in_ros_data.channels.size; i++)
		{
			channels_values.Add(in_ros_data.channels.data[i].values.data[i]);
		}

		
	}

	void SetROS2(sensor_msgs__msg__PointCloud& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = header_stamp_sec;

		out_ros_data.header.stamp.nanosec = header_stamp_nanosec;

		{
			FTCHARToUTF8 strUtf8( *header_frame_id );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*header_frame_id), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		if (out_ros_data.points.data != nullptr)
		{
			free(out_ros_data.points.data);
		}
		out_ros_data.points.data = (decltype(out_ros_data.points.data))malloc(points_x.Num() * (sizeof(points_x) + sizeof(points_y) + sizeof(points_z)));
		out_ros_data.points.size = points_x.Num();
		out_ros_data.points.capacity = points_x.Num();
		for (int i = 0; i < points_x.Num(); i++)
		{
			out_ros_data.points.data[i].x = points_x[i];

			out_ros_data.points.data[i].y = points_y[i];

			out_ros_data.points.data[i].z = points_z[i];

			}
	if (out_ros_data.channels.data != nullptr)
		{
			free(out_ros_data.channels.data);
		}
		out_ros_data.channels.data = (decltype(out_ros_data.channels.data))malloc(channels_name.Num() * (sizeof(channels_name) + sizeof(channels_values)));
		out_ros_data.channels.size = channels_name.Num();
		out_ros_data.channels.capacity = channels_name.Num();
		for (int i = 0; i < channels_name.Num(); i++)
		{
			{
				FTCHARToUTF8 strUtf8( *channels_name[i] );
			int32 strLength = strUtf8.Length();
				out_ros_data.channels.data[i].name.data = (decltype(out_ros_data.channels.data[i].name.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.channels.data[i].name.data)));
		memcpy(out_ros_data.channels.data[i].name.data, TCHAR_TO_UTF8(*channels_name[i]), (strLength+1)*sizeof(char));
				out_ros_data.channels.data[i].name.size = strLength;
				out_ros_data.channels.data[i].name.capacity = strLength + 1;
			}

			out_ros_data.channels.data[i].values.data[i] = channels_values[i];

			}
	
	}
};

UCLASS()
class RCLUE_API UROS2PointCloudMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSPointCloud& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSPointCloud& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	sensor_msgs__msg__PointCloud point_cloud_msg;
};