// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from control_msgs/JointTrajectoryControllerState.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "control_msgs/msg/joint_trajectory_controller_state.h"

#include "Msgs/ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2JointTrajectoryControllerStateMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSJointTrajectoryControllerState
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int header_stamp_sec;

	unsigned int header_stamp_nanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString header_frame_id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> joint_names;

	TArray<double> desired_positions;

	TArray<double> desired_velocities;

	TArray<double> desired_accelerations;

	TArray<double> desired_effort;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int desired_time_from_start_sec;

	unsigned int desired_time_from_start_nanosec;

	TArray<double> actual_positions;

	TArray<double> actual_velocities;

	TArray<double> actual_accelerations;

	TArray<double> actual_effort;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int actual_time_from_start_sec;

	unsigned int actual_time_from_start_nanosec;

	TArray<double> error_positions;

	TArray<double> error_velocities;

	TArray<double> error_accelerations;

	TArray<double> error_effort;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int error_time_from_start_sec;

	unsigned int error_time_from_start_nanosec;

	

	void SetFromROS2(const control_msgs__msg__JointTrajectoryControllerState& in_ros_data)
	{
    	header_stamp_sec = in_ros_data.header.stamp.sec;

		header_stamp_nanosec = in_ros_data.header.stamp.nanosec;

		header_frame_id.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		for (int i = 0; i < in_ros_data.joint_names.size; i++)
		{
			joint_names.Add("");
			joint_names[i].AppendChars(in_ros_data.joint_names.data[i].data,in_ros_data.joint_names.data[i].size);
		}

		for (int i = 0; i < in_ros_data.desired.positions.size; i++)
		{
			desired_positions.Add(in_ros_data.desired.positions.data[i]);
		}

		for (int i = 0; i < in_ros_data.desired.velocities.size; i++)
		{
			desired_velocities.Add(in_ros_data.desired.velocities.data[i]);
		}

		for (int i = 0; i < in_ros_data.desired.accelerations.size; i++)
		{
			desired_accelerations.Add(in_ros_data.desired.accelerations.data[i]);
		}

		for (int i = 0; i < in_ros_data.desired.effort.size; i++)
		{
			desired_effort.Add(in_ros_data.desired.effort.data[i]);
		}

		desired_time_from_start_sec = in_ros_data.desired.time_from_start.sec;

		desired_time_from_start_nanosec = in_ros_data.desired.time_from_start.nanosec;

		for (int i = 0; i < in_ros_data.actual.positions.size; i++)
		{
			actual_positions.Add(in_ros_data.actual.positions.data[i]);
		}

		for (int i = 0; i < in_ros_data.actual.velocities.size; i++)
		{
			actual_velocities.Add(in_ros_data.actual.velocities.data[i]);
		}

		for (int i = 0; i < in_ros_data.actual.accelerations.size; i++)
		{
			actual_accelerations.Add(in_ros_data.actual.accelerations.data[i]);
		}

		for (int i = 0; i < in_ros_data.actual.effort.size; i++)
		{
			actual_effort.Add(in_ros_data.actual.effort.data[i]);
		}

		actual_time_from_start_sec = in_ros_data.actual.time_from_start.sec;

		actual_time_from_start_nanosec = in_ros_data.actual.time_from_start.nanosec;

		for (int i = 0; i < in_ros_data.error.positions.size; i++)
		{
			error_positions.Add(in_ros_data.error.positions.data[i]);
		}

		for (int i = 0; i < in_ros_data.error.velocities.size; i++)
		{
			error_velocities.Add(in_ros_data.error.velocities.data[i]);
		}

		for (int i = 0; i < in_ros_data.error.accelerations.size; i++)
		{
			error_accelerations.Add(in_ros_data.error.accelerations.data[i]);
		}

		for (int i = 0; i < in_ros_data.error.effort.size; i++)
		{
			error_effort.Add(in_ros_data.error.effort.data[i]);
		}

		error_time_from_start_sec = in_ros_data.error.time_from_start.sec;

		error_time_from_start_nanosec = in_ros_data.error.time_from_start.nanosec;

		
	}

	void SetROS2(control_msgs__msg__JointTrajectoryControllerState& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = header_stamp_sec;

		out_ros_data.header.stamp.nanosec = header_stamp_nanosec;

		{
			FTCHARToUTF8 strUtf8( *header_frame_id );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*header_frame_id), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		if (out_ros_data.joint_names.data != nullptr)
		{
			free(out_ros_data.joint_names.data);
		}
		out_ros_data.joint_names.data = (decltype(out_ros_data.joint_names.data))malloc((joint_names.Num())*sizeof(decltype(*out_ros_data.joint_names.data)));
		for (int i = 0; i < joint_names.Num(); i++)
		{
			{
				FTCHARToUTF8 strUtf8( *joint_names[i] );
				int32 strLength = strUtf8.Length();
				if (out_ros_data.joint_names.data[i].data != nullptr)
				{
					free(out_ros_data.joint_names.data[i].data);
				}
				out_ros_data.joint_names.data[i].data = (char*)malloc((strLength+1)*sizeof(char));
				memcpy(out_ros_data.joint_names.data[i].data, TCHAR_TO_UTF8(*joint_names[i]), (strLength+1)*sizeof(char));
				out_ros_data.joint_names.data[i].size = strLength;
				out_ros_data.joint_names.data[i].capacity = strLength + 1;
			}
		}

		if (out_ros_data.desired.positions.data != nullptr)
		{
			free(out_ros_data.desired.positions.data);
		}
		out_ros_data.desired.positions.data = (decltype(out_ros_data.desired.positions.data))malloc((desired_positions.Num())*sizeof(decltype(*out_ros_data.desired.positions.data)));
		
		for (int i = 0; i < desired_positions.Num(); i++)
		{
			out_ros_data.desired.positions.data[i] = desired_positions[i];
		}

		out_ros_data.desired.positions.size = desired_positions.Num();
		out_ros_data.desired.positions.capacity = desired_positions.Num();

		if (out_ros_data.desired.velocities.data != nullptr)
		{
			free(out_ros_data.desired.velocities.data);
		}
		out_ros_data.desired.velocities.data = (decltype(out_ros_data.desired.velocities.data))malloc((desired_velocities.Num())*sizeof(decltype(*out_ros_data.desired.velocities.data)));
		
		for (int i = 0; i < desired_velocities.Num(); i++)
		{
			out_ros_data.desired.velocities.data[i] = desired_velocities[i];
		}

		out_ros_data.desired.velocities.size = desired_velocities.Num();
		out_ros_data.desired.velocities.capacity = desired_velocities.Num();

		if (out_ros_data.desired.accelerations.data != nullptr)
		{
			free(out_ros_data.desired.accelerations.data);
		}
		out_ros_data.desired.accelerations.data = (decltype(out_ros_data.desired.accelerations.data))malloc((desired_accelerations.Num())*sizeof(decltype(*out_ros_data.desired.accelerations.data)));
		
		for (int i = 0; i < desired_accelerations.Num(); i++)
		{
			out_ros_data.desired.accelerations.data[i] = desired_accelerations[i];
		}

		out_ros_data.desired.accelerations.size = desired_accelerations.Num();
		out_ros_data.desired.accelerations.capacity = desired_accelerations.Num();

		if (out_ros_data.desired.effort.data != nullptr)
		{
			free(out_ros_data.desired.effort.data);
		}
		out_ros_data.desired.effort.data = (decltype(out_ros_data.desired.effort.data))malloc((desired_effort.Num())*sizeof(decltype(*out_ros_data.desired.effort.data)));
		
		for (int i = 0; i < desired_effort.Num(); i++)
		{
			out_ros_data.desired.effort.data[i] = desired_effort[i];
		}

		out_ros_data.desired.effort.size = desired_effort.Num();
		out_ros_data.desired.effort.capacity = desired_effort.Num();

		out_ros_data.desired.time_from_start.sec = desired_time_from_start_sec;

		out_ros_data.desired.time_from_start.nanosec = desired_time_from_start_nanosec;

		if (out_ros_data.actual.positions.data != nullptr)
		{
			free(out_ros_data.actual.positions.data);
		}
		out_ros_data.actual.positions.data = (decltype(out_ros_data.actual.positions.data))malloc((actual_positions.Num())*sizeof(decltype(*out_ros_data.actual.positions.data)));
		
		for (int i = 0; i < actual_positions.Num(); i++)
		{
			out_ros_data.actual.positions.data[i] = actual_positions[i];
		}

		out_ros_data.actual.positions.size = actual_positions.Num();
		out_ros_data.actual.positions.capacity = actual_positions.Num();

		if (out_ros_data.actual.velocities.data != nullptr)
		{
			free(out_ros_data.actual.velocities.data);
		}
		out_ros_data.actual.velocities.data = (decltype(out_ros_data.actual.velocities.data))malloc((actual_velocities.Num())*sizeof(decltype(*out_ros_data.actual.velocities.data)));
		
		for (int i = 0; i < actual_velocities.Num(); i++)
		{
			out_ros_data.actual.velocities.data[i] = actual_velocities[i];
		}

		out_ros_data.actual.velocities.size = actual_velocities.Num();
		out_ros_data.actual.velocities.capacity = actual_velocities.Num();

		if (out_ros_data.actual.accelerations.data != nullptr)
		{
			free(out_ros_data.actual.accelerations.data);
		}
		out_ros_data.actual.accelerations.data = (decltype(out_ros_data.actual.accelerations.data))malloc((actual_accelerations.Num())*sizeof(decltype(*out_ros_data.actual.accelerations.data)));
		
		for (int i = 0; i < actual_accelerations.Num(); i++)
		{
			out_ros_data.actual.accelerations.data[i] = actual_accelerations[i];
		}

		out_ros_data.actual.accelerations.size = actual_accelerations.Num();
		out_ros_data.actual.accelerations.capacity = actual_accelerations.Num();

		if (out_ros_data.actual.effort.data != nullptr)
		{
			free(out_ros_data.actual.effort.data);
		}
		out_ros_data.actual.effort.data = (decltype(out_ros_data.actual.effort.data))malloc((actual_effort.Num())*sizeof(decltype(*out_ros_data.actual.effort.data)));
		
		for (int i = 0; i < actual_effort.Num(); i++)
		{
			out_ros_data.actual.effort.data[i] = actual_effort[i];
		}

		out_ros_data.actual.effort.size = actual_effort.Num();
		out_ros_data.actual.effort.capacity = actual_effort.Num();

		out_ros_data.actual.time_from_start.sec = actual_time_from_start_sec;

		out_ros_data.actual.time_from_start.nanosec = actual_time_from_start_nanosec;

		if (out_ros_data.error.positions.data != nullptr)
		{
			free(out_ros_data.error.positions.data);
		}
		out_ros_data.error.positions.data = (decltype(out_ros_data.error.positions.data))malloc((error_positions.Num())*sizeof(decltype(*out_ros_data.error.positions.data)));
		
		for (int i = 0; i < error_positions.Num(); i++)
		{
			out_ros_data.error.positions.data[i] = error_positions[i];
		}

		out_ros_data.error.positions.size = error_positions.Num();
		out_ros_data.error.positions.capacity = error_positions.Num();

		if (out_ros_data.error.velocities.data != nullptr)
		{
			free(out_ros_data.error.velocities.data);
		}
		out_ros_data.error.velocities.data = (decltype(out_ros_data.error.velocities.data))malloc((error_velocities.Num())*sizeof(decltype(*out_ros_data.error.velocities.data)));
		
		for (int i = 0; i < error_velocities.Num(); i++)
		{
			out_ros_data.error.velocities.data[i] = error_velocities[i];
		}

		out_ros_data.error.velocities.size = error_velocities.Num();
		out_ros_data.error.velocities.capacity = error_velocities.Num();

		if (out_ros_data.error.accelerations.data != nullptr)
		{
			free(out_ros_data.error.accelerations.data);
		}
		out_ros_data.error.accelerations.data = (decltype(out_ros_data.error.accelerations.data))malloc((error_accelerations.Num())*sizeof(decltype(*out_ros_data.error.accelerations.data)));
		
		for (int i = 0; i < error_accelerations.Num(); i++)
		{
			out_ros_data.error.accelerations.data[i] = error_accelerations[i];
		}

		out_ros_data.error.accelerations.size = error_accelerations.Num();
		out_ros_data.error.accelerations.capacity = error_accelerations.Num();

		if (out_ros_data.error.effort.data != nullptr)
		{
			free(out_ros_data.error.effort.data);
		}
		out_ros_data.error.effort.data = (decltype(out_ros_data.error.effort.data))malloc((error_effort.Num())*sizeof(decltype(*out_ros_data.error.effort.data)));
		
		for (int i = 0; i < error_effort.Num(); i++)
		{
			out_ros_data.error.effort.data[i] = error_effort[i];
		}

		out_ros_data.error.effort.size = error_effort.Num();
		out_ros_data.error.effort.capacity = error_effort.Num();

		out_ros_data.error.time_from_start.sec = error_time_from_start_sec;

		out_ros_data.error.time_from_start.nanosec = error_time_from_start_nanosec;

		
	}
};

UCLASS()
class RCLUE_API UROS2JointTrajectoryControllerStateMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSJointTrajectoryControllerState& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSJointTrajectoryControllerState& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	control_msgs__msg__JointTrajectoryControllerState joint_trajectory_controller_state_msg;
};