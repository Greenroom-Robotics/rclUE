// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/JointState.msg - do not modify

#pragma once

#include <CoreMinimal.h>

#include "sensor_msgs/msg/joint_state.h"

#include "ROS2GenericMsg.h"
#include "rclcUtilities.h"

#include "ROS2JointStateMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSJointState
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int header_stamp_sec;

	unsigned int header_stamp_nanosec;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString header_frame_id;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	TArray<FString> name;

	TArray<double> position;

	TArray<double> velocity;

	TArray<double> effort;

	

	void SetFromROS2(const sensor_msgs__msg__JointState& in_ros_data)
	{
    	header_stamp_sec = in_ros_data.header.stamp.sec;

		header_stamp_nanosec = in_ros_data.header.stamp.nanosec;

		header_frame_id.AppendChars(in_ros_data.header.frame_id.data, in_ros_data.header.frame_id.size);

		for (int i = 0; i < in_ros_data.name.size; i++)
		{
			name.Add("");
			name[i].AppendChars(in_ros_data.name.data[i].data,in_ros_data.name.data[i].size);
		}

		for (int i = 0; i < in_ros_data.position.size; i++)
		{
			position.Add(in_ros_data.position.data[i]);
		}

		for (int i = 0; i < in_ros_data.velocity.size; i++)
		{
			velocity.Add(in_ros_data.velocity.data[i]);
		}

		for (int i = 0; i < in_ros_data.effort.size; i++)
		{
			effort.Add(in_ros_data.effort.data[i]);
		}

		
	}

	void SetROS2(sensor_msgs__msg__JointState& out_ros_data) const
	{
    	out_ros_data.header.stamp.sec = header_stamp_sec;

		out_ros_data.header.stamp.nanosec = header_stamp_nanosec;

		{
			FTCHARToUTF8 strUtf8( *header_frame_id );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.header.frame_id.data != nullptr)
		{
			free(out_ros_data.header.frame_id.data);
		}
		out_ros_data.header.frame_id.data = (decltype(out_ros_data.header.frame_id.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.header.frame_id.data)));
		memcpy(out_ros_data.header.frame_id.data, TCHAR_TO_UTF8(*header_frame_id), (strLength+1)*sizeof(char));
			out_ros_data.header.frame_id.size = strLength;
			out_ros_data.header.frame_id.capacity = strLength + 1;
		}

		if (out_ros_data.name.data != nullptr)
		{
			free(out_ros_data.name.data);
		}
		out_ros_data.name.data = (decltype(out_ros_data.name.data))malloc((name.Num())*sizeof(decltype(*out_ros_data.name.data)));
		for (int i = 0; i < name.Num(); i++)
		{
			{
				FTCHARToUTF8 strUtf8( *name[i] );
				int32 strLength = strUtf8.Length();
				if (out_ros_data.name.data[i].data != nullptr)
				{
					free(out_ros_data.name.data[i].data);
				}
				out_ros_data.name.data[i].data = (char*)malloc((strLength+1)*sizeof(char));
				memcpy(out_ros_data.name.data[i].data, TCHAR_TO_UTF8(*name[i]), (strLength+1)*sizeof(char));
				out_ros_data.name.data[i].size = strLength;
				out_ros_data.name.data[i].capacity = strLength + 1;
			}
		}

		if (out_ros_data.position.data != nullptr)
		{
			free(out_ros_data.position.data);
		}
		out_ros_data.position.data = (decltype(out_ros_data.position.data))malloc((position.Num())*sizeof(decltype(*out_ros_data.position.data)));
		
		for (int i = 0; i < position.Num(); i++)
		{
			out_ros_data.position.data[i] = position[i];
		}

		out_ros_data.position.size = position.Num();
		out_ros_data.position.capacity = position.Num();

		if (out_ros_data.velocity.data != nullptr)
		{
			free(out_ros_data.velocity.data);
		}
		out_ros_data.velocity.data = (decltype(out_ros_data.velocity.data))malloc((velocity.Num())*sizeof(decltype(*out_ros_data.velocity.data)));
		
		for (int i = 0; i < velocity.Num(); i++)
		{
			out_ros_data.velocity.data[i] = velocity[i];
		}

		out_ros_data.velocity.size = velocity.Num();
		out_ros_data.velocity.capacity = velocity.Num();

		if (out_ros_data.effort.data != nullptr)
		{
			free(out_ros_data.effort.data);
		}
		out_ros_data.effort.data = (decltype(out_ros_data.effort.data))malloc((effort.Num())*sizeof(decltype(*out_ros_data.effort.data)));
		
		for (int i = 0; i < effort.Num(); i++)
		{
			out_ros_data.effort.data[i] = effort[i];
		}

		out_ros_data.effort.size = effort.Num();
		out_ros_data.effort.capacity = effort.Num();

		
	}
};

UCLASS()
class RCLUE_API UROS2JointStateMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSJointState& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSJointState& Output) const;
	
	virtual void* Get() override;

private:
	virtual FString MsgToString() const override;

	sensor_msgs__msg__JointState joint_state_msg;
};