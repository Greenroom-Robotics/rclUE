// Copyright 2021 Rapyuta Robotics Co., Ltd.
// This code has been autogenerated from sensor_msgs/Image.msg - do not modify

#pragma once

#include <vector>

#include <CoreMinimal.h>

#include "sensor_msgs/msg/image.h"

#include "Msgs/ROS2GenericMsg.h"
#include "Msgs/ROS2HeaderMsg.h"
#include "rclcUtilities.h"

#include "ROS2ImageMsg.generated.h"

USTRUCT(Blueprintable)
struct RCLUE_API FROSImage
{
	GENERATED_BODY()

public:
	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FROSHeader header;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int height; // original uint32

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int width; // original uint32

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	FString encoding;

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int32 is_bigendian; // original uint8

	UPROPERTY(EditAnywhere, BlueprintReadWrite)
	int step; // original uint32 -- maybe this should be automatically populated

	UPROPERTY(BlueprintReadWrite)
	TArray<FColor> data; // original seq of uint8
	// TArray<uint8> data;	// this would probably not translate across well in Blueprint compliant types..

	std::vector<uint8_t> buffer;

	void SetFromROS2(const sensor_msgs__msg__Image& in_ros_data)
	{
    	header.SetFromROS2(in_ros_data.header);

		height = in_ros_data.height;

		width = in_ros_data.width;

		encoding.AppendChars(in_ros_data.encoding.data, in_ros_data.encoding.size);

		is_bigendian = in_ros_data.is_bigendian;

		step = in_ros_data.step;

		// TODO
		// for (int i = 0; i < in_ros_data.data.size; i++)
		// {
		// 	data.Add(in_ros_data.data.data[i]);
		// }

		
	}

	void SetROS2(sensor_msgs__msg__Image& out_ros_data) const
	{
    	header.SetROS2(out_ros_data.header);

		out_ros_data.height = height;

		out_ros_data.width = width;

		{
			FTCHARToUTF8 strUtf8( *encoding );
			int32 strLength = strUtf8.Length();
			if (out_ros_data.encoding.data != nullptr)
		{
			free(out_ros_data.encoding.data);
		}
		out_ros_data.encoding.data = (decltype(out_ros_data.encoding.data))malloc((strLength+1)*sizeof(decltype(*out_ros_data.encoding.data)));
		memcpy(out_ros_data.encoding.data, TCHAR_TO_UTF8(*encoding), (strLength+1)*sizeof(char));
			out_ros_data.encoding.size = strLength;
			out_ros_data.encoding.capacity = strLength + 1;
		}

		out_ros_data.is_bigendian = is_bigendian;
		out_ros_data.step = step;



		// if (out_ros_data.data.size != (step * height)) {
		// 	if (out_ros_data.data.data != nullptr)
		// 	{
		// 		free(out_ros_data.data.data);
		// 	}
		// 	out_ros_data.data.data = (decltype(out_ros_data.data.data)) malloc((step * height)*sizeof(decltype(*out_ros_data.data.data)));
		
		// 	out_ros_data.data.size = step * height;
		// 	out_ros_data.data.capacity = step * height;
		// }


		// uint32_t* data_32b = reinterpret_cast<uint32_t*>(out_ros_data.data.data);



		// for (int i = 0; i < data.Num(); i++)
		// {
		// 	int j = data.Num() * 4;
		// 	// this is broken -- seems to be writing outside of the permitted area
		// 	// data_32b[i] = data[i].ToPackedRGBA();
		// 	out_ros_data.data.data[j] = data[i].R;
		// 	out_ros_data.data.data[j+1] = data[i].G;
		// 	out_ros_data.data.data[j+2] = data[i].B;
		// 	out_ros_data.data.data[j+3] = data[i].A;
		// }

		//https://docs.unrealengine.com/4.27/en-US/API/Runtime/Core/Containers/TArray/GetData/2/

		out_ros_data.data.data = (uint8_t*) buffer.data();
		out_ros_data.data.size = buffer.size();
		out_ros_data.data.capacity = buffer.size();
	}
};

UCLASS()
class RCLUE_API UROS2ImageMsg : public UROS2GenericMsg
{
	GENERATED_BODY()

public:
	virtual void Init() override;
	virtual void Fini() override;

	virtual const rosidl_message_type_support_t* GetTypeSupport() const override;
	
  	UFUNCTION(BlueprintCallable)
	void SetMsg(const FROSImage& Input);
	
  	UFUNCTION(BlueprintCallable)
	void GetMsg(FROSImage& Output) const;
	
	virtual void* Get() override;

  	UFUNCTION(BlueprintCallable)
	void BufferCopy(UPARAM(ref) FROSImage& img, UPARAM(ref) TArray<FColor>& input) {
		img.buffer.clear();

		for (auto& c : input) {
			img.buffer.push_back((uint8_t) c.R);
			img.buffer.push_back((uint8_t)c.G);
			img.buffer.push_back((uint8_t)c.B);
			img.buffer.push_back((uint8_t)c.A);
		}
	}

private:
	virtual FString MsgToString() const override;

	sensor_msgs__msg__Image image_msg;
};